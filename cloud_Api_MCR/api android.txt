public static List<Department> fetchEarthquakeData(String requestUrl) {
        // Create URL object
        URL url = createUrl(requestUrl);
        rurl = requestUrl;



        // Perform HTTP request to the URL and receive a JSON response back
        String jsonResponse = null;
        try {
            jsonResponse = makeHttpRequest(url);
        } catch (IOException e) {
            Log.e(LOG_TAG, "Problem making the HTTP request.", e);
        }

        // Extract relevant fields from the JSON response and create a list of {@link Course}s
        List<Department> departments = extractFeatureFromJson(jsonResponse);

        // Return the list of {@link Course}s
        return departments;
    }

    /**
     * Returns new URL object from the given string URL.
     */
    private static URL createUrl(String stringUrl) {
        URL url = null;
        try {
            url = new URL(stringUrl);
        } catch (MalformedURLException e) {
            Log.e(LOG_TAG, "Problem building the URL ", e);
        }
        return url;
    }


 /**
     * Make an HTTP request to the given URL and return a String as the response.
     */
    private static String makeHttpRequest(URL url) throws IOException {
        String jsonResponse = "";

        // If the URL is null, then return early.
        if (url == null) {
            return jsonResponse;
        }

        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        try {
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setReadTimeout(10000 /* milliseconds */);
            urlConnection.setConnectTimeout(15000 /* milliseconds */);
            urlConnection.setRequestMethod("GET");
            urlConnection.connect();

            // If the request was successful (response code 200),
            // then read the input stream and parse the response.
            if (urlConnection.getResponseCode() == 200) {
                inputStream = urlConnection.getInputStream();
                jsonResponse = readFromStream(inputStream);
            } else {
                Log.e(LOG_TAG, "Error response code: " + urlConnection.getResponseCode());
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "Problem retrieving the earthquake JSON results.", e);
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
            if (inputStream != null) {
                // Closing the input stream could throw an IOException, which is why
                // the makeHttpRequest(URL url) method signature specifies than an IOException
                // could be thrown.
                inputStream.close();
            }
        }
        return jsonResponse;
    }


/**
     * Convert the {@link InputStream} into a String which contains the
     * whole JSON response from the server.
     */
    private static String readFromStream(InputStream inputStream) throws IOException {
        StringBuilder output = new StringBuilder();
        if (inputStream != null) {
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, Charset.forName("UTF-8"));
            BufferedReader reader = new BufferedReader(inputStreamReader);
            String line = reader.readLine();
            while (line != null) {
                output.append(line);
                line = reader.readLine();
            }
        }
        return output.toString();
    }

    /**
     * Return a list of {@link Department} objects that has been built up from
     * parsing the given JSON response.
     */
    private static List<Department> extractFeatureFromJson(String earthquakeJSON) {
        // If the JSON string is empty or null, then return early.
        if (TextUtils.isEmpty(earthquakeJSON)) {
            return null;
        }

        // Create an empty ArrayList that we can start adding departments to
        List<Department> departments = new ArrayList<>();

        // Try to parse the JSON response string. If there's a problem with the way the JSON
        // is formatted, a JSONException exception object will be thrown.
        // Catch the exception so the app doesn't crash, and print the error message to the logs.
        try {

            JSONObject root = new JSONObject(earthquakeJSON);
            JSONArray features = root.getJSONArray("Data");

            for (int i = 0; i < features.length(); i++) {

                JSONObject base = features.getJSONObject(i) ;//==================lookjhghjghjghjghjghg========================




                 String facultyid= base.getString("FacultyId") ;;
               String departmentid= base.getString("DepartmentId") ;;
                 String departmentname = base.getString("DepartmentName") ;;
                String departmentshortid = base.getString("DepartmentShortId") ;;
               String totalcredit= base.getString("TotalCredits") ; ;
              String costpercredit= base.getString("CostPerCredit") ; ;








                Department department = new Department(facultyid,departmentid,departmentname,departmentshortid,totalcredit,costpercredit);
               // departments.add(department);
                // Add the new {@link Course} to the list of departments.


               // Log.d(LOG_TAG,"inside department util"+ rurl +"  "+faculty+"="+facultyid);

               // departments.add(department);
                if(rurl.length()==168)
                {

                    Log.d(LOG_TAG,"inside Department util  "+ rurl);
                    departments.add(department);

                }
                else   {



                        faculty = rurl.substring(179, 184);



                    if (faculty.equals(facultyid)) {  Log.d(LOG_TAG,"inside Department util faculty  "+ rurl+faculty); departments.add(department);}


                }
            }

        } catch (JSONException e) {
            // If an error is thrown when executing any of the above statements in the "try" block,
            // catch the exception here, so the app doesn't crash. Print a log message
            // with the message from the exception.
            Log.e("QueryUtils", "Problem parsing the earthquake JSON results", e);
        }

        // Return the list of departments
        return departments;
    }