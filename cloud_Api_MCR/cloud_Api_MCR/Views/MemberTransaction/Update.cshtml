@using cloud_Api_MCR.Models.Account_DTO
@using cloud_Api_MCR.Models.MCR_DTO
@using cloud_Api_MCR.Models.ASL_DTO
@model cloud_Api_MCR.Models.MCR_DTO.ViewMcrMTrans
@{
    ViewBag.Title = "Update";
    if (HttpContext.Current.Session["loggedToken"] == null)
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    var loggedToken = HttpContext.Current.Session["loggedToken"]?.ToString();
    var loggedUserTp = HttpContext.Current.Session["loggedUserType"].ToString();
    var loggedUserStatus = HttpContext.Current.Session["loggedUserStatus"].ToString();
    var loggedCompId = HttpContext.Current.Session["loggedCompID"].ToString();
    var loggedUserId = HttpContext.Current.Session["loggedUserID"].ToString();
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    var createStatus = "";
    var updateStatus = "";
    var deleteStatus = "";
    var viewStatus = "";
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {
        ViewAslRole roleInfo = new ViewAslRole();
        roleInfo = (ViewAslRole)TempData["UserRoleInfo"];
        if (roleInfo != null)
        {
            viewStatus = roleInfo.Status;
            createStatus = roleInfo.Insertr;
            updateStatus = roleInfo.Updater;
            deleteStatus = roleInfo.Deleter;
        }
    }

    if (updateStatus == "A")
    {

    }
    else if (createStatus == "A")
    {
        Response.Redirect("~/MemberTransaction/Create");
    }
    else if (deleteStatus == "A")
    {
        Response.Redirect("~/MemberTransaction/Delete");
    }

    if (viewStatus == "I" || updateStatus == "I")
    {
        Response.Redirect("~/GraphView/Index");
    }




    List<SelectListItem> listtype = new List<SelectListItem>();
    listtype.Add(new SelectListItem { Text = "Receipt", Value = "MREC" });
    listtype.Add(new SelectListItem { Text = "Payment", Value = "MPAY" });
    //listtype.Add(new SelectListItem { Text = "JOUR", Value = "JOUR" });
    listtype.Add(new SelectListItem { Text = "Fund Transfer", Value = "FTRF" });

    //List<SelectListItem> listTransFor = new List<SelectListItem>();
    //listTransFor.Add(new SelectListItem { Text = "RECEIPT", Value = "RECEIPT" });
    //listTransFor.Add(new SelectListItem { Text = "PAYMENT", Value = "PAYMENT" });
    //listTransFor.Add(new SelectListItem { Text = "LEDGER TO SCHEME", Value = "LEDGER TO SCHEME" });
    //listTransFor.Add(new SelectListItem { Text = "SCHEME TO LEDGER", Value = "SCHEME TO LEDGER" });
    //listTransFor.Add(new SelectListItem { Text = "SCHEME TO SCHEME", Value = "SCHEME TO SCHEME" });

    //List<SelectListItem> listTransMode = new List<SelectListItem>();
    //listTransMode.Add(new SelectListItem { Text = "GENERAL", Value = "GENERAL" });
    //listTransMode.Add(new SelectListItem { Text = "WITHDRAW", Value = "WITHDRAW" });
    //listTransMode.Add(new SelectListItem { Text = "RETURN", Value = "RETURN" });
    //listTransMode.Add(new SelectListItem { Text = "INTEREST", Value = "INTEREST" });


    //Member loaded in DropdownList
    List<SelectListItem> listOfMemberName = new List<SelectListItem>();
    List<SelectListItem> listOfMemberName2 = new List<SelectListItem>();
    if (TempData["passData_SelectMemberList"] != null)
    {
        List<ViewMcrMember> passDataCostPool = (List<ViewMcrMember>)TempData["passData_SelectMemberList"];
        foreach (var n in passDataCostPool)
        {
            listOfMemberName.Add(new SelectListItem { Text = n.Membernm, Value = n.Memberid.ToString() });
            listOfMemberName2.Add(new SelectListItem { Text = n.Membernm, Value = n.Memberid.ToString() });
        }
    }

    // Scheme loaded in DropdownList
    List<SelectListItem> listOfScheme = new List<SelectListItem>();
    List<SelectListItem> listOfScheme2 = new List<SelectListItem>();
    if (TempData["passData_SelectSchemeList"] != null)
    {
        List<ViewMcrScheme> passSchemeList = (List<ViewMcrScheme>)TempData["passData_SelectSchemeList"];
        foreach (var n in passSchemeList)
        {
            listOfScheme.Add(new SelectListItem { Text = n.Schemeid, Value = n.Schemeid.ToString() });
            listOfScheme2.Add(new SelectListItem { Text = n.Schemeid, Value = n.Schemeid.ToString() });
        }
    }

    // Scheme loaded in DropdownList
    List<SelectListItem> listOfAccount = new List<SelectListItem>();
    if (TempData["passData_SelectAccountNameList"] != null)
    {
        List<ViewGlAcchart> passAccountList = (List<ViewGlAcchart>)TempData["passData_SelectAccountNameList"];
        foreach (var n in passAccountList)
        {
            listOfAccount.Add(new SelectListItem { Text = n.Accountnm, Value = n.Accountcd.ToString() });
        }
    }
}

<link href="~/Content/bootstrap-Datepicker/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap-Datepicker/datepicker3.css" rel="stylesheet" />
<link href="~/Content/select2-4.0.3/css/select2.css" rel="stylesheet" /> <!--Select2 DropDown with Box -->
<script src="~/Content/bootstrap-Datepicker/bootstrap-datepicker.js"></script>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div id="contentHeaderBox">

        @if (TempData["MemmberTransactionUpdateMessage"] != null)
        {
            <h1 style="padding-left:16px">
                Member Transaction Update - &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color:#c71817;font-style:italic;">@TempData["MemmberTransactionUpdateMessage"]</span>
            </h1>
        }
        else
        {
            <h1 style="padding-left:16px">
                Member Transaction Update
            </h1>
        }

        <div class="btn-group pull-right" id="editOption">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                <i class="fa fa-cog"></i>
            </button>
            <ul class="dropdown-menu pull-right" style="" role="menu">
                @if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "MemberTransaction")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "MemberTransaction")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "MemberTransaction")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "MemberTransaction")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "MemberTransaction")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "MemberTransaction")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "MemberTransaction")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "MemberTransaction")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "MemberTransaction")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "MemberTransaction")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                }
                else if (updateStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "MemberTransaction")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Delete", "MemberTransaction")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
            </ul>
        </div>
    </div>
    <br />
    <div class="col-md-12">

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Transaction Type", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.Transtp, listtype, "-Select-", htmlAttributes: new { id = "txtTransTp", @class = "form-control", autofocus = true , tabindex = "1" })
                    @Html.ValidationMessageFor(model => model.Transtp, "", new { @class = "text-danger" })
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Transaction Date", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.Transdt, htmlAttributes: new { id = "txtTransdt", @class = "form-control", required = "required",tabindex = "2" })
                    @Html.ValidationMessageFor(model => model.Transdt, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-1">
                    @Html.Label("Month", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.Transmy, htmlAttributes: new { id = "idTransMonth", @class = "form-control", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Transmy, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-1">
                    @Html.Label("Invoice", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                   @Html.DropDownListFor(model => model.Transno, new SelectList(string.Empty, "Value", "Text"), "- Select -", htmlAttributes: new { id = "idTransNO", @class = "form-control", tabindex = "3" })
                   @Html.ValidationMessageFor(model => model.Transno, "", new { @class = "text-danger" })
                </div>
            </div>
            <hr />
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Transaction For", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Transfor, new SelectList(string.Empty, "Value", "Text"), htmlAttributes: new { id = "idTransFor", @class = "form-control", required = "required", tabindex = "4" })
                    @Html.ValidationMessageFor(model => model.Transfor, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Transaction Mode", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Transmode, new SelectList(string.Empty, "Value", "Text"), htmlAttributes: new { id = "txtTransMode", @class = "form-control", tabindex = "5" })
                    @Html.ValidationMessageFor(model => model.Transmode, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <!--Show Only Receive & Payment-->
            <div class="row" id="idDivAccount">
                <div class="col-md-2">
                    @Html.Label("Account Name", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Glheadid, listOfAccount, "- Select -", htmlAttributes: new { id = "idAccountName", @class = "form-control", tabindex = "6" })
                </div>
            </div>
            <br id="idDivAccount1" />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Scheme", htmlAttributes: new { id = "labelSchemeFrom", @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Schemeid, listOfScheme,"- Select -", htmlAttributes: new { id = "idscheme", @class = "form-control", tabindex = "7" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Internal ID", htmlAttributes: new { id = "labelInternalIDFrom", @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Internid, new SelectList(string.Empty, "Value", "Text"), htmlAttributes: new { id = "txtInternId", @class = "form-control input-sm", tabindex = "8" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Member Name", htmlAttributes: new { id = "labelMemberNameFrom", @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.MemberName, htmlAttributes: new { id = "idMemberName", @class = "form-control", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Memberid, htmlAttributes: new { id = "idMember", @class = "form-control" })
                </div>
            </div>
            <br />
            <div class="row" id="idExtra">
                <div class="col-md-2">
                    @Html.Label("Scheme To", htmlAttributes: new { id = "labelSchemeTo", @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Schemeid2, listOfScheme2, "- Select -", htmlAttributes: new { id = "idscheme2", @class = "form-control", tabindex = "9" })
                </div>
            </div>
            <br id="idExtra2" />
            <div class="row" id="idExtra3">
                <div class="col-md-2">
                    @Html.Label("Internal ID To", htmlAttributes: new { id = "labelInternalIDTo", @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Internid2, new SelectList(string.Empty, "Value", "Text"), htmlAttributes: new { id = "txtInternId2",  @class = "form-control input-sm", tabindex = "10" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Member Name To", htmlAttributes: new { id = "labelMemberNameTo", @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.MemberName2, htmlAttributes: new { id = "idMemberName2", @class = "form-control", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Memberid2, htmlAttributes: new { id = "idMember2", @class = "form-control" })
                </div>
            </div>
            <br id="idExtra4" />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Amount", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Amount, htmlAttributes: new { @class = "form-control", id = "txtAmount", type = "number", step = "any", required = "required", tabindex = "11" })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Remarks", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.TextAreaFor(model => model.Remarks, htmlAttributes: new {id= "txtRemarks", @class = "form-control", tabindex = "12" })
                </div>
                <br />
            </div>
            <br />

            @Html.TextBoxFor(model => model.Insltude, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />

            <br />
            <div class="row">
                <div class="col-md-3"></div>
                <div class="col-md-3">
                    <input type="submit" class="btn btn-primary btn-block" value="Update" name="command" tabindex = "13"/>
                </div>
                @*<div class="col-md-3">
                        <input type="submit" class="btn btn-primary btn-block" id="createp" value="Create & Print" name="command" formtarget="_blank" />
                    </div>*@
            </div>
        </div>
    </div>

    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });
    </script>
    <script type="text/javascript">


        $(document).ready(function () {

            $('#txtTransdt').datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: true,
            }).on('show', function (e) {
                if (e.date) {
                    $(this).data('stickyDate', e.date);
                } else {
                    $(this).data('stickyDate', null);
                }
            }).on('hide', function (e) {
                var stickyDate = $(this).data('stickyDate');

                if (!e.date && stickyDate) {
                    $(this).datepicker('setDate', stickyDate);
                    $(this).data('stickyDate', null);
                }
            }).on('changeDate', dateChanged);


            function dateChanged() {
                var txtTransDate = $('#txtTransdt').val();
                var txtTransType = $('#txtTransTp').val();

                var txttransYear = document.getElementById('idTransMonth');
                $("#idTransMonth").val(" ");
                $.getJSON(
                    "/MemberTransaction/DateChanged_getMonth", { "TxtTransDate": txtTransDate, "TxtTransType": txtTransType },
                    function (myData) {
                        txttransYear.value = myData.month;
                        document.getElementById("idTransNO").focus();
                    });


                $("#idTransNO").val(" ");
                $.ajax
                ({
                    url: '@Url.Action("Invoiceload", "MemberTransaction")',
                    type: 'post',
                    dataType: "json",
                    data: { theDate: txtTransDate, type: txtTransType },
                    success: function (data) {
                        $("#idTransNO").empty();
                        $("#idTransNO").append('<option value="'
                            + "select" + '">'
                            + "select" + '</option>');

                        $.each(data, function (i, memo) {
                            $("#idTransNO").append('<option value="'
                                + memo.Value + '">'
                                + memo.Text + '</option>');

                        });
                    }
                });
            };


            //$('#idAccountName').select2({
            //    placeholder: 'Select an option',
            //    //width: '99%',
            //    //theme: "bootstrap"
            //});


            //$('#idscheme').select2({
            //    placeholder: 'Select an option',
            //    //width: '99%',
            //    //theme: "bootstrap"
            //});

            //$('#idscheme2').select2({
            //    placeholder: 'Select an option',
            //    //width: '99%',
            //    //theme: "bootstrap"
            //});


            $('#idExtra').hide();
            $('#idExtra2').hide();
            $('#idExtra3').hide();
            $('#idExtra4').hide();
            $('#txtTransTp').change(function () {
                dateChanged();
                var changedtxt = $('#txtTransTp').val();
                if (changedtxt === "MREC" || changedtxt === "MPAY") {
                    $('#idDivAccount').show();
                    $('#idDivAccount1').show();
                    $('#idExtra').hide();
                    $('#idExtra2').hide();
                    $('#idExtra3').hide();
                    $('#idExtra4').hide();
                }
                else {
                    $('#idDivAccount').hide();
                    $('#idDivAccount1').hide();
                    $('#idExtra').show();
                    $('#idExtra2').show();
                    $('#idExtra3').show();
                    $('#idExtra4').show();
                }

                $("#idTransFor").empty();
                $("#txtTransMode").empty();

                if (changedtxt === "MREC") {
                    $('#labelSchemeFrom').text('Scheme');
                    $('#labelInternalIDFrom').text('Internal-ID');
                    $('#labelMemberNameFrom').text('Member Name');

                    $("#idTransFor").append('<option value="'
                              + "RECEIPT" + '">'
                              + "RECEIPT" + '</option>');
                    $("#txtTransMode").append('<option value="'
                            + "GENERAL" + '">'
                            + "GENERAL" + '</option>');
                }
                else if (changedtxt === "MPAY") {
                    $('#labelSchemeFrom').text('Scheme');
                    $('#labelInternalIDFrom').text('Internal-ID');
                    $('#labelMemberNameFrom').text('Member Name');

                    $("#idTransFor").append('<option value="'
                             + "PAYMENT" + '">'
                             + "PAYMENT" + '</option>');
                    $("#txtTransMode").append('<option value="'
                          + "WITHDRAW" + '">'
                          + "WITHDRAW" + '</option>');
                }
                else if (changedtxt === "FTRF") {
                    $('#labelSchemeFrom').text('Scheme (From)');
                    $('#labelInternalIDFrom').text('Internal-ID (From)');
                    $('#labelMemberNameFrom').text('Member Name (From)');
                    $('#labelSchemeTo').text('Scheme (To)');
                    $('#labelInternalIDTo').text('Internal-ID (To)');
                    $('#labelMemberNameTo').text('Member Name (To)');

                    $("#idTransFor").append('<option value="'
                             + "SCHEME TO SCHEME" + '">'
                             + "SCHEME TO SCHEME" + '</option>');
                    $("#txtTransMode").append('<option value="'
                          + "GENERAL" + '">'
                          + "GENERAL" + '</option>');
                }


                $("#idAccountName").val("");
                $("#idscheme").val("");
                $("#idscheme2").val("");
                $("#txtInternId").val("");
                $("#txtInternId2").val("");
                $("#idMember").val("");
                $("#idMember2").val("");
                $("#idMemberName").val("");
                $("#idMemberName2").val("");
                $("#txtAmount").val("");
                $("#txtRemarks").val("");

            });

            $('#idscheme').change(function () {
                $("#idMemberName").val(" ");
                var schemeid = $('#idscheme').val();
                $.ajax
                ({
                    url: '@Url.Action("InternalIdLoadAfterSchemeSelect", "MemberTransaction")',
                    type: 'post',
                    dataType: "json",
                    data: { schemeId: schemeid },
                    success: function (data) {
                        $("#txtInternId").empty();
                        $("#txtInternId").append('<option value="'
                            + '">'
                            + "--Select--" + '</option>');
                        $.each(data, function (i, memo) {

                            $("#txtInternId").append('<option value="'
                                + memo.Value + '">'
                                + memo.Text + '</option>');
                        });
                    }
                });
                document.getElementById("txtInternId").focus();
            });


            $('#txtInternId').change(function () {
                var txtInternId = $('#txtInternId').val();
                var txtSchemeId = $('#idscheme').val();

                var txtMemberName = document.getElementById('idMemberName');
                var txtMember = document.getElementById('idMember');
                $("#idMemberName").val(" ");
                $("#idMember").val(" ");
                $.getJSON(
                    "/MemberTransaction/GetMemberName", { "TxtInternId": txtInternId, "TxtSchemeId": txtSchemeId },
                    function (myData) {
                        txtMemberName.value = myData.MemberName;
                        txtMember.value = myData.MemberId;
                        document.getElementById("idscheme2").focus();
                    });
            });


            //idscheme2
            $('#idscheme2').change(function () {
                $("#idMemberName2").val(" ");
                var schemeid2 = $('#idscheme2').val();
                $.ajax
                ({
                    url: '@Url.Action("InternalIdLoadAfterSchemeSelect", "MemberTransaction")',
                    type: 'post',
                    dataType: "json",
                    data: { schemeId: schemeid2 },
                    success: function (data) {
                        $("#txtInternId2").empty();
                        $("#txtInternId2").append('<option value="'
                            + '">'
                            + "--Select--" + '</option>');
                        $.each(data, function (i, memo) {

                            $("#txtInternId2").append('<option value="'
                                + memo.Value + '">'
                                + memo.Text + '</option>');
                        });
                    }
                });
                document.getElementById("txtInternId2").focus();
            });

            //txtInternId2
            $('#txtInternId2').change(function () {
                var txtInternId = $('#txtInternId2').val();
                var txtSchemeId = $('#idscheme2').val();

                var txtMemberName = document.getElementById('idMemberName2');
                var txtMember = document.getElementById('idMember2');
                $("#idMemberName2").val(" ");
                $("#idMember2").val(" ");
                $.getJSON(
                    "/MemberTransaction/GetMemberName", { "TxtInternId": txtInternId, "TxtSchemeId": txtSchemeId },
                    function (myData) {
                        txtMemberName.value = myData.MemberName;
                        txtMember.value = myData.MemberId;
                    });
            });



            $('#idTransNO').change(function () {
                var memoNo = $('#idTransNO').val();
                var transType = $('#txtTransTp option:selected').val();
                var monthYear = $('#idTransMonth').val();

                var idTransFor = document.getElementById('idTransFor');
                var txtTransMode = document.getElementById('txtTransMode');
                var idAccountName = document.getElementById('idAccountName');
                var idscheme = document.getElementById('idscheme');
                var txtInternId = document.getElementById('txtInternId');
                var idMemberName = document.getElementById('idMemberName');
                var idMember = document.getElementById('idMember');
                var idscheme2 = document.getElementById('idscheme2');
                var txtInternId2 = document.getElementById('txtInternId2');
                var idMemberName2 = document.getElementById('idMemberName2');
                var idMember2 = document.getElementById('idMember2');
                var txtAmount = document.getElementById('txtAmount');
                var txtRemarks = document.getElementById('txtRemarks');

                $.getJSON(
                   "/MemberTransaction/GetMemberTransactionInformation", { "TransType": transType, "MonthYear": monthYear, "MemoNo": memoNo },
                   function (myData) {
                       idTransFor.value = myData.transFor;
                       txtTransMode.value = myData.transMode;
                       idscheme.value = myData.sheme;
                       txtInternId.value = myData.internalid;
                       idMemberName.value = myData.memberName;
                       idMember.value = myData.memberId;
                       txtAmount.value = myData.amount;
                       txtRemarks.value = myData.remark;

                       if (transType === "MREC" || transType === "MPAY") {
                           idAccountName.value = myData.acountName;
                       }
                       else {
                           idscheme2.value = myData.sheme2;
                           txtInternId2.value = myData.internalid2;
                           idMemberName2.value = myData.memberName2;
                           idMember2.value = myData.memberId2;

                           var schemeid2 = $('#idscheme2').val();
                           $.ajax
                           ({
                               url: '@Url.Action("InternalIdLoadAfterSchemeSelect", "MemberTransaction")',
                               type: 'post',
                               dataType: "json",
                               data: { schemeId: schemeid2 },
                               success: function(data) {
                                   $("#txtInternId2").empty();
                                   $("#txtInternId2").append('<option value="'
                                       + myData.internalid2 + '">'
                                       + myData.internalid2 + '</option>');
                                   $.each(data, function(i, memo) {

                                       $("#txtInternId2").append('<option value="'
                                           + memo.Value + '">'
                                           + memo.Text + '</option>');
                                   });
                               }
                           });
                       }


                       var schemeid = $('#idscheme').val();
                       if (schemeid != null) {
                           $.ajax
                           ({
                           url: '@Url.Action("InternalIdLoadAfterSchemeSelect", "MemberTransaction")',
                           type: 'post',
                           dataType: "json",
                           data: { schemeId: schemeid },
                           success: function (data) {
                               $("#txtInternId").empty();
                               $("#txtInternId").append('<option value="'
                           + myData.internalid + '">'
                           + myData.internalid + '</option>');
                               $.each(data, function (i, memo) {

                                   $("#txtInternId").append('<option value="'
                                       + memo.Value + '">'
                                       + memo.Text + '</option>');
                               });
                           }
                           });
                       }
                       document.getElementById("idTransFor").focus();
                   });

                $("#idAccountName").val("");
                $("#idscheme").val("");
                $("#idscheme2").val("");
                $("#txtInternId").val("");
                $("#txtInternId2").val("");
                $("#idMember").val("");
                $("#idMember2").val("");
                $("#idMemberName").val("");
                $("#idMemberName2").val("");
                $("#txtAmount").val("");
                $("#txtRemarks").val("");
            });
        });
    </script>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Content/select2-4.0.3/js/select2.full.min.js"></script> <!--Select2 DropDown with Box -->
