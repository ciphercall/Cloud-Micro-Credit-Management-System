@using cloud_Api_MCR.Models
@using cloud_Api_MCR.Models.Account_DTO
@using cloud_Api_MCR.Models.ASL_DTO
@using cloud_Api_MCR.Models.MCR_DTO
@model cloud_Api_MCR.Models.MCR_DTO.ViewMcrMScheme
@{
    ViewBag.Title = "Index";

    if (HttpContext.Current.Session["loggedToken"] == null)
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    var loggedToken = HttpContext.Current.Session["loggedToken"]?.ToString();
    var loggedUserTp = HttpContext.Current.Session["loggedUserType"].ToString();
    var loggedUserStatus = HttpContext.Current.Session["loggedUserStatus"].ToString();
    var loggedCompId = HttpContext.Current.Session["loggedCompID"].ToString();
    var loggedUserId = HttpContext.Current.Session["loggedUserID"].ToString();
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }


    var createStatus = "";
    var updateStatus = "";
    var deleteStatus = "";
    var viewStatus = "";
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {
        ViewAslRole roleInfo = new ViewAslRole();
        roleInfo = (ViewAslRole)TempData["UserRoleInfo"];
        viewStatus = roleInfo.Status;
        createStatus = roleInfo.Insertr;
        updateStatus = roleInfo.Updater;
        deleteStatus = roleInfo.Deleter;
    }

    if (viewStatus == "I")
    {
        Response.Redirect("~/GraphView/Index");
    }


    // Member loaded in DropdownList
    List<SelectListItem> listOfMember = new List<SelectListItem>();
    List<ViewMcrMember> passData1 = (List<ViewMcrMember>)TempData["passData_SelectMemberList"];
    foreach (var n in passData1)
    {
        listOfMember.Add(new SelectListItem { Text = n.Membernm, Value = n.Memberid.ToString() });
    }


    // Scheme loaded in DropdownList
    List<SelectListItem> listOfScheme = new List<SelectListItem>();
    List<ViewMcrScheme> passData2 = (List<ViewMcrScheme>)TempData["passData_SelectSchemeList"];
    foreach (var n in passData2)
    {
        listOfScheme.Add(new SelectListItem { Text = n.Schemeid, Value = n.Schemeid.ToString() });
    }



    List<SelectListItem> listOfStatus = new List<SelectListItem>();
    listOfStatus.Add(new SelectListItem { Text = "ACTIVE", Value = "A" });
    listOfStatus.Add(new SelectListItem { Text = "INACTIVE", Value = "I" });


}

<link href="~/Content/bootstrap-Datepicker/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap-Datepicker/datepicker3.css" rel="stylesheet" />
<link href="~/Content/Angular-File/ng-grid.css" rel="stylesheet" />
<link href="~/Content/select2-4.0.3/css/select2.css" rel="stylesheet" /> <!--Select2 DropDown with Box -->
<script src="~/Content/bootstrap-Datepicker/bootstrap-datepicker.js"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div id="contentHeaderBox">
        <h1 style="padding-left: 16px">Member Scheme List</h1>
    </div>
    <br />


    <div class="col-md-12">
        <div class="form-group">
            <div ng-app="MemberSchemeApp" data-ng-controller="ApiMemberSchemeController">
                @Html.HiddenFor(model => model.Compid, new { id = "txtCid", @Value = loggedCompId })
                @Html.HiddenFor(model => model.Insuserid, new { id = "txtUid", @Value = loggedUserId })
                @Html.HiddenFor(model => model.Token, new { id = "txtTid", @Value = loggedToken })
                @Html.HiddenFor(model => model.Insert, new { id = "txt_Insertid", @Value = createStatus })
                @Html.HiddenFor(model => model.Update, new { id = "txt_Updateid", @Value = updateStatus })
                @Html.HiddenFor(model => model.Delete, new { id = "txt_Deleteid", @Value = deleteStatus })
                @Html.HiddenFor(model => model.Insltude, new { id = "latlon" })
                <input id="lat" type="hidden" />
                <input id="lon" type="hidden" />

                <div class="row">
                    <form>
                        <div class="col-md-3">
                            @Html.Label("name", "Member Name", htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-5">
                            @Html.DropDownListFor(model => model.Memberid, listOfMember, "- Select -", new { id = "ddlMemberId", @class = "form-control" })
                        </div>
                        <input type="submit" value="Search" data-ng-click="search($event)" class="btn btn-primary" id="btnSearch" style="display: none" />
                    </form>
                </div>
                <br />

                <div class="row">
                    @*<div class="col-md-1">
                        </div>*@
                    <div class="col-md-12">
                        <div class="panel panel-primary">
                            <div class="panel-heading">Information</div>
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <tr>
                                        <th @*style="width: 30%"*@>Scheme</th>
                                        <th @*style="width: 30%"*@>Internal ID </th>
                                        <th @*style="width: 20%"*@>From Date</th>
                                        <th @*style="width: 20%"*@>To Date</th>
                                        <th @*style="width: 20%"*@>Remarks</th>
                                        <th @*style="width: 10%"*@>Status</th>
                                        <th @*style="width: 10%"*@></th>
                                    </tr>
                                    <tr>
                                        <td>@Html.DropDownListFor(model => model.Schemeid, listOfScheme, "- Select -", new { id = "ddlSchemeId", @class = "form-control input-sm" })</td>
                                        <td><input type="text" maxlength="5" pattern="([0-9][0-9][0-9][0-9][0-9])" class="form-control input-sm" data-ng-model="newChild.Internid" id="txtInternId" required /></td>
                                        <td><input type="text" class="form-control input-sm" data-ng-model="newChild.Schemeefdt" id="txtFromDateId" required /></td>
                                        <td><input type="text" class="form-control input-sm" data-ng-model="newChild.Schemeetdt" id="txtToDateId" required /></td>
                                        <td><input type="text" class="form-control input-sm" data-ng-model="newChild.Remarks" id="txtRemarksId" required /></td>
                                        <td>@Html.DropDownListFor(model => model.Status, listOfStatus, new { id = "ddlStatusId", @class = "form-control input-sm" })</td>
                                        <td><input type="submit" value="Insert" data-ng-click="addrow($event)" class="btn btn-primary" /></td>
                                    </tr>

                                    <tr data-ng-repeat="testitem in gridData">
                                        <td hidden><strong data-ng-hide="testitem.editMode">{{testitem.Compid}}</strong></td>
                                        <td hidden><p data-ng-hide="testitem.editMode">{{ testitem.Memberid }}</p></td>
                                        <td hidden><p data-ng-hide="testitem.editMode">{{ testitem.Schemesl }}</p></td>
                                        <td style="text-align: left;">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.Schemeid }}</p>
                                            <input class="form-control input-sm" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.Schemeid" id="gridSchemeId" readonly="readonly" />
                                        </td>
                                        <td style="text-align: left;">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.Internid }}</p>
                                            <input class="form-control input-sm txtIntern" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.Internid" maxlength="5" pattern="([0-9][0-9][0-9][0-9][0-9])" id="gridInternId" />
                                        </td>
                                        <td style="text-align: left;">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.Schemeefdt }}</p>
                                            <input class="form-control input-sm gridFromDate" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.Schemeefdt" id="gridFromDateId" />
                                        </td>
                                        <td style="text-align: left;">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.Schemeetdt }}</p>
                                            <input class="form-control input-sm gridToDate" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.Schemeetdt" id="gridToDateId" />
                                        </td>
                                        <td style="text-align: left;">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.Remarks }}</p>
                                            <input class="form-control input-sm" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.Remarks" id="gridToDateId" />
                                        </td>
                                        <td style="text-align: left;">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.Status }}</p>
                                            @Html.DropDownListFor(model => model.Status, listOfStatus, new { id = "gridStatusId", @class = "form-control input-sm", data_ng_show = "testitem.editMode", data_ng_model = "testitem.Status" })
                                        </td>
                                        <td>
                                            <p data-ng-hide="testitem.editMode"><a data-ng-click="toggleEdit(testitem)" href="javascript:;">Edit</a> | <a data-ng-click="deleteItem(testitem)" href="javascript:;">Delete</a></p>
                                            <p data-ng-show="testitem.editMode"><a data-ng-click="update(testitem)" href="javascript:;">Save</a> | <a data-ng-click="toggleEdit_Cancel(testitem)" href="javascript:;">Cancel</a></p>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                    @*<div class="col-md-1">
                        </div>*@
                </div>
            </div>
        </div>
    </div>




    //Latitute & longitude
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);
            //navigator.geolocation.getCurrentPosition(showPosition, positionError);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
        });
    </script>


    <script type="text/javascript">

        $(document).ready(function () {
            //$.datetimepicker.setLocale('en');
            //$('#txtFromDateId').datetimepicker({
            //    lang: 'en',
            //    format: 'd-M-Y'
            //    //value: '2015/04/15 00:00', step: 10
            //});

            //$('#txtToDateId').datetimepicker({
            //    lang: 'en',
            //    format: 'd-M-Y'
            //    //value: '2015/04/15 05:03', step: 10
            //});


            $('#txtFromDateId').datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: true,
                disableTouchKeyboard: true,
            }).on('show', function (e) {
                if (e.date) {
                    $(this).data('stickyDate', e.date);
                } else {
                    $(this).data('stickyDate', null);
                }
            }).on('hide', function (e) {
                var stickyDate = $(this).data('stickyDate');

                if (!e.date && stickyDate) {
                    $(this).datepicker('setDate', stickyDate);
                    $(this).data('stickyDate', null);
                }
                document.getElementById("txtToDateId").focus();
            });

            $('#txtToDateId').datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: true,
                disableTouchKeyboard: true,
            }).on('show', function (e) {
                if (e.date) {
                    $(this).data('stickyDate', e.date);
                } else {
                    $(this).data('stickyDate', null);
                }
            }).on('hide', function (e) {
                var stickyDate = $(this).data('stickyDate');

                if (!e.date && stickyDate) {
                    $(this).datepicker('setDate', stickyDate);
                    $(this).data('stickyDate', null);
                }
            });


            $(document).on("click", "input.gridFromDate", function (e) {
                $(this).datepicker({
                    format: "dd-M-yyyy",
                    autoclose: true,
                    todayHighlight: true,
                    showOnFocus: true,
                    disableTouchKeyboard: true,
                }).on('show', function (e) {
                    if (e.date) {
                        $(this).data('stickyDate', e.date);
                    } else {
                        $(this).data('stickyDate', null);
                    }
                }).on('hide', function (e) {
                    var stickyDate = $(this).data('stickyDate');

                    if (!e.date && stickyDate) {
                        $(this).datepicker('setDate', stickyDate);
                        $(this).data('stickyDate', null);
                    }
                }).on('changeDate', function (e) {
                    var data = $(this).val();
                    $("#gridFromDateId").val(data);
                });
            });


            $(document).on("click", "input.gridToDate", function (e) {
                $(this).datepicker({
                    format: "dd-M-yyyy",
                    autoclose: true,
                    todayHighlight: true,
                    showOnFocus: true,
                    disableTouchKeyboard: true,
                }).on('show', function (e) {
                    if (e.date) {
                        $(this).data('stickyDate', e.date);
                    } else {
                        $(this).data('stickyDate', null);
                    }
                }).on('hide', function (e) {
                    var stickyDate = $(this).data('stickyDate');

                    if (!e.date && stickyDate) {
                        $(this).datepicker('setDate', stickyDate);
                        $(this).data('stickyDate', null);
                    }
                }).on('changeDate', function (e) {
                    var data = $(this).val();
                    $("#gridToDateId").val(data);
                });
            });

            $('#ddlMemberId').change(function () {
                $('#btnSearch').click();
            });

            $('#ddlMemberId').select2({
                placeholder: 'Select an option'
            });

            $('#ddlSchemeId').select2({
                placeholder: 'Select an option'
            });

            $("#txtInternId").keyup(function () {
                $("#txtInternId").val(this.value.match(/[0-9]*/));
            });


            $("#gridInternId").keyup(function () {
                $("#gridInternId").val(this.value.match(/[0-9]*/));
            });

            $(document).on("keyup", "input.txtIntern", function (e) {
                $(this).val(this.value.match(/[0-9]*/));
            });



        });
    </script>
}


@*<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>*@

<script src="~/Scripts/angularjs/1.0.5/angular.js"></script>
<script src="~/Content/select2-4.0.3/js/select2.full.min.js"></script> <!--Select2 DropDown with Box -->
<script src="~/Scripts/ViewScripts/MemberScheme/_Index.js"></script>
<script src="~/Scripts/angularjs/ui-bootstrap-tpls-0.4.0.js"></script>



