@using cloud_Api_MCR.Models.MCR_DTO
@using cloud_Api_MCR.Models.ASL_DTO
@model cloud_Api_MCR.Models.MCR_DTO.ViewMcrMNominee
@{
    ViewBag.Title = "Update";
    if (HttpContext.Current.Session["loggedToken"] == null)
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    var loggedToken = HttpContext.Current.Session["loggedToken"]?.ToString();
    var loggedUserTp = HttpContext.Current.Session["loggedUserType"].ToString();
    var loggedUserStatus = HttpContext.Current.Session["loggedUserStatus"].ToString();
    var loggedCompId = HttpContext.Current.Session["loggedCompID"].ToString();
    var loggedUserId = HttpContext.Current.Session["loggedUserID"].ToString();
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    var createStatus = "";
    var updateStatus = "";
    var deleteStatus = "";
    var viewStatus = "";
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {
        ViewAslRole roleInfo = new ViewAslRole();
        roleInfo = (ViewAslRole)TempData["UserRoleInfo"];
        if (roleInfo != null)
        {
            viewStatus = roleInfo.Status;
            createStatus = roleInfo.Insertr;
            updateStatus = roleInfo.Updater;
            deleteStatus = roleInfo.Deleter;
        }
    }

    if (updateStatus == "A")
    {

    }
    else if (createStatus == "A")
    {
        Response.Redirect("~/MemberNominee/Create");
    }
    else if (deleteStatus == "A")
    {
        Response.Redirect("~/MemberNominee/Delete");
    }

    if (viewStatus == "I" || updateStatus == "I")
    {
        Response.Redirect("~/GraphView/Index");
    }

    //Member loaded in DropdownList
    List<SelectListItem> listOfMemberName = new List<SelectListItem>();
    if (TempData["passData_SelectMemberList"] != null)
    {
        List<ViewMcrMember> passDataCostPool = (List<ViewMcrMember>)TempData["passData_SelectMemberList"];
        foreach (var n in passDataCostPool)
        {
            listOfMemberName.Add(new SelectListItem { Text = n.Membernm, Value = n.Memberid.ToString() });
        }
    }

}


<link href="~/Content/bootstrap-Datepicker/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap-Datepicker/datepicker3.css" rel="stylesheet" />
<link href="~/Content/select2-4.0.3/css/select2.css" rel="stylesheet" /> <!--Select2 DropDown with Box -->
<script src="~/Content/bootstrap-Datepicker/bootstrap-datepicker.js"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div id="contentHeaderBox">

        @if (TempData["MemberNomineeUpdateMessage"] != null)
        {
            <h1 style="padding-left: 16px">
                Update Member Nominee - &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: #c71817; font-style: italic;">@TempData["MemberNomineeUpdateMessage"]</span>
            </h1>
        }
        else
        {
            <h1 style="padding-left: 16px">
                Update Member Nominee
            </h1>
        }

        <div class="btn-group pull-right" id="editOption">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                <i class="fa fa-cog"></i>
            </button>
            <ul class="dropdown-menu pull-right" style="" role="menu">
                @if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "MemberNominee")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "MemberNominee")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "MemberNominee")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "MemberNominee")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "MemberNominee")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "MemberNominee")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "MemberNominee")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "MemberNominee")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "MemberNominee")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "MemberNominee")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                }
                else if (updateStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "MemberNominee")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Delete", "MemberNominee")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
            </ul>
        </div>
    </div>
    <br />


    <div class="col-md-12">
        <div class="form-group">
            <div class="row">
                <div class="col-md-2" Style="text-align: right">
                    @Html.Label("Member Name", htmlAttributes: new {@class = "control-label"})
                </div>
                <div class="col-md-9">
                    @Html.DropDownListFor(model => model.Memberid, listOfMemberName,"-Select-", htmlAttributes: new {id = "txtMemberId", @class = "form-control", autofocus = true, @tabindex = "1"})
                    @Html.ValidationMessageFor(model => model.Memberid, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="row">
                <div class="col-md-2" Style="text-align: right">
                    @Html.Label("Nominee ID", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.DropDownListFor(model => model.Nomineeid, new SelectList(string.Empty, "Value", "Text"), "--Select--", htmlAttributes: new { id = "txtNomineeId", @class = "form-control", @tabindex = "2" })
                    @Html.ValidationMessageFor(model => model.Nomineeid, "", new {@class = "text-danger"})
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2" Style="text-align: right">
                    @Html.Label("Nominee Name", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.Nomineenm, htmlAttributes: new { id = "txtNomineeName", @class = "form-control", @tabindex = "2" })
                    @Html.ValidationMessageFor(model => model.Nomineenm, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2" Style="text-align: right">
                    @Html.Label("Guardian Name", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.Guardiannm, htmlAttributes: new { id = "txtGuardianName", @class = "form-control", @tabindex = "2" })
                    @Html.ValidationMessageFor(model => model.Guardiannm, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2" Style="text-align: right">
                    @Html.Label("Mother Name", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.Mothernm, htmlAttributes: new { id = "txtMotherName", @class = "form-control", @tabindex = "3" })
                    @Html.ValidationMessageFor(model => model.Mothernm, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2" Style="text-align: right">
                    @Html.Label("Age", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.Age, htmlAttributes: new { id = "txtAge", @class = "form-control", @tabindex = "4" })
                    @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3" Style="text-align: right">
                    @Html.Label("Relation", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.Relation, htmlAttributes: new { id = "txtRelation", @class = "form-control", @tabindex = "5" })
                    @Html.ValidationMessageFor(model => model.Relation, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2" Style="text-align: right">
                    @Html.Label("Nominee (%)", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.Npcnt, htmlAttributes: new { id = "txtNomineeCent", @class = "form-control", @tabindex = "6" })
                    @Html.ValidationMessageFor(model => model.Npcnt, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3" Style="text-align: right">
                    @Html.Label("Remarks", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextAreaFor(model => model.Remarks, htmlAttributes: new { id = "txtRemarks", @class = "form-control", @tabindex = "7" })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            @Html.TextBoxFor(model => model.Updltude, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />

            <div class="row">
                <div class="col-md-3"></div>
                <div class="col-md-3">
                    <input type="submit" class="btn btn-primary btn-block" value="Update" name="command" />
                </div>
            </div>
        </div>
    </div>

    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }

            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });


        $(document).ready(function () {

            $('#txtMemberId').select2({
                placeholder: 'Select an option'
            });

            $('#txtMemberId').change(function () {
                var memberid = $('#txtMemberId').val();
                $.ajax
                ({
                    url: '@Url.Action("NomineeIdLoadAfterMemberSelect", "MemberNominee")',
                    type: 'post',
                    dataType: "json",
                    data: { memberId: memberid },
                    success: function (data) {
                        $("#txtNomineeId").empty();
                        $("#txtNomineeId").append('<option value="'
                            + '">'
                            + "--Select--" + '</option>');
                        $.each(data, function (i, memo) {

                            $("#txtNomineeId").append('<option value="'
                                + memo.Value + '">'
                                + memo.Text + '</option>');
                        });
                    }
                });              
                document.getElementById("txtNomineeId").focus();
            });




            $('#txtNomineeId').change(function () {
                var memberid = $('#txtMemberId').val();
                var changedDropDown = $('#txtNomineeId option:selected').val();

                var txtNomineeName = document.getElementById('txtNomineeName');
                var txtGuardianName = document.getElementById('txtGuardianName');
                var txtMotherName = document.getElementById('txtMotherName');
                var txtAge = document.getElementById('txtAge');
                var txtRelation = document.getElementById('txtRelation');
                var txtNomineeCent = document.getElementById('txtNomineeCent');
                var txtRemarks = document.getElementById('txtRemarks');

                $.getJSON(
                   "/MemberNominee/GetMemberNomineeInformation", { "Memberid": memberid, "ChangedDropDown": changedDropDown },
                   function (myData) {
                       txtNomineeName.value = myData.nomineeName;
                       txtGuardianName.value = myData.guardiannm;
                       txtMotherName.value = myData.mothernm;
                       txtAge.value = myData.age;
                       txtRelation.value = myData.relation;
                       txtNomineeCent.value = myData.npcent;
                       txtRemarks.value = myData.remarks;

                       document.getElementById("txtNomineeName").focus();
                   });

                $("#txtNomineeName").val("");
                $("#txtGuardianName").val("");
                $("#txtMotherName").val("");
                $("#txtAge").val("");
                $("#txtRelation").val("");
                $("#txtNomineeCent").val("");
                $("#txtRemarks").val("");                
            });


        });
    </script>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="~/Content/select2-4.0.3/js/select2.full.min.js"></script> <!--Select2 DropDown with Box -->

