@using cloud_Api_MCR.Models.Account_DTO
@using cloud_Api_MCR.Models.ASL_DTO
@model cloud_Api_MCR.Models.Account_DTO.ViewGlStrans
@{
    ViewBag.Title = "Update";
    if (HttpContext.Current.Session["loggedToken"] == null)
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    var loggedToken = HttpContext.Current.Session["loggedToken"]?.ToString();
    var loggedUserTp = HttpContext.Current.Session["loggedUserType"].ToString();
    var loggedUserStatus = HttpContext.Current.Session["loggedUserStatus"].ToString();
    var loggedCompId = HttpContext.Current.Session["loggedCompID"].ToString();
    var loggedUserId = HttpContext.Current.Session["loggedUserID"].ToString();
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }



    var createStatus = "";
    var updateStatus = "";
    var deleteStatus = "";
    var viewStatus = "";
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {
        ViewAslRole roleInfo = new ViewAslRole();
        roleInfo = (ViewAslRole)TempData["UserRoleInfo"];
        if (roleInfo != null)
        {
            viewStatus = roleInfo.Status;
            createStatus = roleInfo.Insertr;
            updateStatus = roleInfo.Updater;
            deleteStatus = roleInfo.Deleter;
        }
    }

    if (updateStatus == "A")
    {

    }
    else if (createStatus == "A")
    {
        Response.Redirect("~/SingleTransaction/Create");
    }
    else if (deleteStatus == "A")
    {
        Response.Redirect("~/SingleTransaction/Delete");
    }

    if (viewStatus == "I" || updateStatus == "I")
    {
        Response.Redirect("~/GraphView/Index");
    }





    List<SelectListItem> listtype = new List<SelectListItem>();
    listtype.Add(new SelectListItem { Text = "PAYMENT", Value = "MPAY" });
    listtype.Add(new SelectListItem { Text = "RECEIPT", Value = "MREC" });
    listtype.Add(new SelectListItem { Text = "JOURNAL", Value = "JOUR" });
    listtype.Add(new SelectListItem { Text = "CONTRA", Value = "CONT" });


    List<SelectListItem> listTransFor = new List<SelectListItem>();
    listTransFor.Add(new SelectListItem { Text = "OFFICIAL", Value = "OFFICIAL" });
    listTransFor.Add(new SelectListItem { Text = "COSTPOOL", Value = "COSTPOOL" });

    List<SelectListItem> listTransMode = new List<SelectListItem>();
    listTransMode.Add(new SelectListItem { Text = "CASH", Value = "CASH" });
    listTransMode.Add(new SelectListItem { Text = "A/C PAYEE CHEQUE", Value = "A/C PAYEE CHEQUE" });
    listTransMode.Add(new SelectListItem { Text = "CASH CHEQUE", Value = "CASH CHEQUE" });
    listTransMode.Add(new SelectListItem { Text = "EFT", Value = "EFT" });


    //var costpname = from n in db.GlCostPoolDbSet where n.Compid == compid select new { n.COSTPNM, n.COSTPID };
    List<SelectListItem> listcostpname = new List<SelectListItem>();
    if (TempData["passData_SelectCostPool"] != null)
    {
        List<ViewGlCostPool> passDataCostPool = (List<ViewGlCostPool>)TempData["passData_SelectCostPool"];
        foreach (var n in passDataCostPool)
        {
            listcostpname.Add(new SelectListItem { Text = n.Costpnm, Value = n.Costpid.ToString() });
        }
    }
}

<link href="~/Content/bootstrap-Datepicker/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap-Datepicker/datepicker3.css" rel="stylesheet"/>
<link href="~/Content/select2-4.0.3/css/select2.css" rel="stylesheet"/> <!--Select2 DropDown with Box -->

<script src="~/Content/bootstrap-Datepicker/bootstrap-datepicker.js"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)


    <div id="contentHeaderBox">
        @if (TempData["VoucherUpdateMessage"] != null)
        {
            <h1 style="padding-left:16px">
                Voucher Update&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color:#c71817;font-style:italic;">@TempData["VoucherUpdateMessage"]</span>
            </h1>
        }
        else
        {
            <h1 style="padding-left:16px">
                Voucher Update
            </h1>
        }

        <div class="btn-group pull-right" id="editOption">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                <i class="fa fa-cog"></i>
            </button>
            <ul class="dropdown-menu pull-right" style="" role="menu">
                @if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "SingleTransaction")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "SingleTransaction")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "SingleTransaction")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "SingleTransaction")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "SingleTransaction")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "SingleTransaction")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "SingleTransaction")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "SingleTransaction")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "SingleTransaction")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "SingleTransaction")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                }
                else if (updateStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "SingleTransaction")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Delete", "SingleTransaction")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
            </ul>
        </div>

    </div>
    <br />
    <div class="col-md-12">
        <div class="form-group">
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Transaction Type", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.Transtp, listtype, "--Select--", htmlAttributes: new { id = "txtTransTp", @class = "form-control", autofocus = true })
                    @Html.ValidationMessageFor(model => model.Transtp, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Transaction Date", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.Transdt, htmlAttributes: new { id = "idTransDT", @class = "form-control", required = "required" })
                    @*@Html.ValidationMessageFor(model => model.AGlStrans.TRANSDT, "", new { @class = "text-danger" })*@
                </div>
                <div class="col-md-1">
                    @Html.Label("Month", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.Transmy, htmlAttributes: new { id = "idTransMonth", @class = "form-control", @readonly = "readonly" })
                </div>
                <div class="col-md-1">
                    @Html.Label("Invoice", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-2">
                    @Html.DropDownListFor(model => model.Transno, new SelectList(string.Empty, "Value", "Text"), "- Select -", htmlAttributes: new { id = "idTransNO", @class = "form-control" })

                </div>
            </div>
            <div>
                <hr />
            </div>
            <br />
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Transaction For", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.DropDownListFor(model => model.Transfor, listTransFor, "-Select--", htmlAttributes: new { id = "idTransFor", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Transfor, "", new { @class = "text-danger" })
                 </div>
                <div class="col-md-1">
                    @Html.Label("Cost Pool", htmlAttributes: new { id = "txtCostpool", @class = "control-label" })
                </div>
                <div class="col-md-5">
                    @Html.DropDownListFor(model => model.Costpid, listcostpname, "--Select--", htmlAttributes: new { id = "idCostPID", @class = "form-control" })

                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Transaction Mode", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.Transmode, listTransMode, "--Select--", htmlAttributes: new { id = "txtTransMode", @class = "form-control" })
                    @*@Html.ValidationMessageFor(model => model.TRANSFOR, "", new { @class = "text-danger" })*@
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Debitcd, htmlAttributes: new { id = "txtDebitCD", @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.Debitcd, new SelectList(string.Empty, "Value", "Text"), "--Select--", htmlAttributes: new { id = "iddebitcd", @class = "form-control", required = "required" })
                    @*@Html.ValidationMessageFor(model => model.Debitcd, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Creditcd, htmlAttributes: new { id = "txtCreditCD", @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.Creditcd, new SelectList(string.Empty, "Value", "Text"), "--Select--", htmlAttributes: new { id = "idcreditcd", @class = "form-control", required = "required" })
                    @*@Html.ValidationMessageFor(model => model.Creditcd, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <br />
            <div class="row" id="cheque">
                <div class="col-md-3">
                    @Html.Label("Cheque No", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.Chequeno, htmlAttributes: new { id = "txtchequeno", @class = "form-control" })
                    @*@Html.ValidationMessageFor(model => model.Chequeno, "", new { @class = "text-danger" })*@
                </div>
                <div class="col-md-2">
                    @Html.Label("Cheque Date", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.Chequedt, htmlAttributes: new { id = "txtchequedate", @class = "form-control" })
                    @*@Html.ValidationMessageFor(model => model.Chequedt, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Amount", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Amount, htmlAttributes: new { id = "idamount", @class = "form-control", type = "number", step = "any", required = "required" })
                    @*@Html.ValidationMessageFor(model => model.AGlStrans.AMOUNT, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Remarks", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Remarks, htmlAttributes: new { id = "idremarks", @class = "form-control" })
                </div>
                <br />
            </div>
            <br />

            @Html.TextBoxFor(model => model.Updltude, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />


            <br />
            <div class="row">
                <div class="col-md-3"></div>
                <div class="col-md-3">
                    <input type="submit" class="btn btn-primary btn-block" value="Update" name="command" id="btnUpdate"/>
                </div>
                <div class="col-md-3">
                    <input type="submit" class="btn btn-primary btn-block" value="Update & Print" name="command" formtarget="_blank" id="btnUpdatePrint"/>
                </div>
            </div>
        </div>
    </div>

    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });
    </script>
    
    <script type="text/javascript">

        $(document).ready(function () {
            
            $('#txtchequedate').datepicker({
                dateFormat: "dd-M-yy"
                //format: "yyyy-M-dd"
            });

            $('#cheque').hide();

            $('#btnUpdatePrint').click(function () {
                $('#txtTransTp').attr('disabled', false);
                $('#idTransNO').attr('disabled', false);
                $('#idTransDT').attr('disabled', false);
                setTimeout(function () { window.location.reload(); }, 100);
            });

            $('#btnUpdate').click(function () {
                $('#txtTransTp').attr('disabled', false);
                $('#idTransNO').attr('disabled', false);
                $('#idTransDT').attr('disabled', false);
            });

            $('#txtTransTp').change(function () {
                var txttransYear = document.getElementById('idTransMonth');
                var txtTransDate = $('#idTransDT').val();;
                var txtTransType = $('#txtTransTp').val();
                $.getJSON(
                    "/SingleTransaction/DateChanged_getMonth", { "TxtTransDate": txtTransDate, "TxtTransType": txtTransType },
                    function (myData) {
                        txttransYear.value = myData.month;
                    });

                var changedtxt = $('#txtTransTp').val();
                $("#idTransNO").val(" ");
                $.ajax
                ({
                    url: '@Url.Action("Invoiceload", "SingleTransaction")',
                    type: 'post',
                    dataType: "json",
                    data: { theDate: txtTransDate, type: changedtxt },
                    success: function (data) {
                        $("#idTransNO").empty();
                        $("#idTransNO").append('<option value="'
                            + "select" + '">'
                            + "select" + '</option>');

                        $.each(data, function (i, memo) {
                            $("#idTransNO").append('<option value="'
                                + memo.Value + '">'
                                + memo.Text + '</option>');

                        });
                    }
                });

                if (changedtxt === "MREC") {
                    $('#txtDebitCD').text('Received To');
                    $('#txtCreditCD').text('Received From');
                }
                else if (changedtxt === "MPAY") {
                    $('#txtDebitCD').text('Paid To');
                    $('#txtCreditCD').text('Paid From');
                }
                else if (changedtxt === "JOUR") {
                    $('#txtDebitCD').text('Debited To');
                    $('#txtCreditCD').text('Credited To');
                }
                else if (changedtxt === "CONT") {
                    $('#txtDebitCD').text('Deposited To');
                    $('#txtCreditCD').text('Withdrawl From');
                }
            });

             $('#idTransDT').datepicker({
                    dateFormat: "dd-M-yy",
                    onSelect: function (datetxt, instance) {

                        var txttransYear = document.getElementById('idTransMonth');
                        var txtTransDate = datetxt;
                        var txtTransType = $('#txtTransTp').val();
                        $.getJSON(
                            "/SingleTransaction/DateChanged_getMonth", { "TxtTransDate": txtTransDate, "TxtTransType": txtTransType },
                            function (myData) {
                                txttransYear.value = myData.month;
                            });

                        var changedtxt = $('#txtTransTp').val();
                        $("#idTransNO").val(" ");
                        $.ajax
                        ({
                            url: '@Url.Action("Invoiceload", "SingleTransaction")',
                            type: 'post',
                            dataType: "json",
                            data: { theDate: datetxt, type: changedtxt },
                            success: function (data) {
                                $("#idTransNO").empty();
                                $("#idTransNO").append('<option value="'
                                    + "select" + '">'
                                    + "select" + '</option>');

                                $.each(data, function (i, memo) {
                                    $("#idTransNO").append('<option value="'
                                        + memo.Value + '">'
                                        + memo.Text + '</option>');

                                });
                            }
                        });
                    }
                });



            $('#idTransNO').change(function () {

                var type = $('#txtTransTp').val();
                var transno = $('#idTransNO').val();
                var transMonthYr = $('#idTransMonth').val();

                var txttransFor = document.getElementById('idTransFor');
                var txtcostPId = document.getElementById('idCostPID');
                var txttransMode = document.getElementById('txtTransMode');
                var txtdebitCd = document.getElementById('iddebitcd');
                var txtcreditCd = document.getElementById('idcreditcd');
                var txtChequeNo = document.getElementById('txtchequeno');
                var txtChequeDate = document.getElementById('txtchequedate');
                var txtamount = document.getElementById('idamount');
                var txtremarks = document.getElementById('idremarks');

                $.getJSON(
                    "/SingleTransaction/GetTransactionInfo", { "Type": type, "TransMonthYr": transMonthYr ,"Transno": transno },
                    function (myData) {
                        txttransFor.value = myData.For;
                        txtcostPId.value = myData.costpool;
                        txttransMode.value = myData.mode;
                        txtdebitCd.value = myData.debit;
                        txtcreditCd.value = myData.credit;
                        txtChequeNo.value = myData.cheque;
                        txtChequeDate.value = myData.ChequeDate;
                        txtamount.value = myData.Amount;
                        txtremarks.value = myData.Remarks;

                        if (txttransFor.value === "OFFICIAL") {
                            $('#txtCostpool').hide();
                            $('#idCostPID').hide();
                        }
                        else {
                            $('#txtCostpool').show();
                            $('#idCostPID').show();
                        }

                        if (txttransMode.value === "A/C PAYEE CHEQUE" || txttransMode.value === "CASH CHEQUE") {
                            $('#cheque').show();
                        }
                        else {
                            $('#cheque').hide();
                        }

                        $('#txtTransTp').attr('disabled', true);
                        $('#idTransNO').attr('disabled', true);
                        $('#idTransDT').attr('disabled', true);

                        $("#iddebitcd").empty();
                        $("#iddebitcd").append('<option value="'
                            + myData.debitCD + '">'
                            + myData.firstdebittext + '</option>');
                        $.each(myData.debit, function (i, memo) {
                            $("#iddebitcd").append('<option value="'
                                + memo.Value + '">'
                                + memo.Text + '</option>');
                        });

                        $("#idcreditcd").empty();
                        $("#idcreditcd").append('<option value="'
                            + myData.creditCD + '">'
                            + myData.firstcredittext + '</option>');
                        $.each(myData.credit, function (i, memo) {
                            $("#idcreditcd").append('<option value="'
                                + memo.Value + '">'
                                + memo.Text + '</option>');
                        });

                    });




                $('#iddebitcd').change(function () {
                    var debitvalue = $('#iddebitcd').val();
                    $.ajax
                    ({
                      url: '@Url.Action("CreditloadAfterDebitselect", "SingleTransaction")',
                      type: 'post',
                      dataType: "json",
                      data: { type: type, dvalue: debitvalue },
                      success: function (data1) {
                          $("#idcreditcd").empty();
                          $("#idcreditcd").append('<option value="'
                              + '">'
                             + "--Select--" + '</option>');

                          $.each(data1, function (i, memo1) {
                              $("#idcreditcd").append('<option value="'
                                  + memo1.Value + '">'
                                  + memo1.Text + '</option>');
                          });

                      }
                  });
                });
                $("#idTransFor").val(" ");
                $("#idCostPID").val(" ");
                $("#txtTransMode").val(" ");
                $("#iddebitcd").val(" ");
                $("#idcreditcd").val(" ");
                $("#txtchequeno").val(" ");
                $("#txtchequedate").val(" ");

            });


            $('#iddebitcd').select2({
                placeholder: 'Select an option'
            });
            $('#idcreditcd').select2({
                placeholder: 'Select an option'
            });

            $('#idTransFor').change(function () {
                var changedtxt = $('#idTransFor').val();
                if (changedtxt === "OFFICIAL") {
                    $('#txtCostpool').hide();
                    $('#idCostPID').hide();
                }
                else {
                    $('#txtCostpool').show();
                    $('#idCostPID').show();
                }
            });


            $('#txtTransMode').change(function () {
                var changedtxt = $('#txtTransMode').val();
                if (changedtxt === "A/C PAYEE CHEQUE" || changedtxt === "CASH CHEQUE") {
                    $('#cheque').show();
                }
                else {
                    $('#cheque').hide();
                }
            });

        });


    </script>
}

<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>
<script src="~/Content/select2-4.0.3/js/select2.full.min.js"></script> <!--Select2 DropDown with Box -->