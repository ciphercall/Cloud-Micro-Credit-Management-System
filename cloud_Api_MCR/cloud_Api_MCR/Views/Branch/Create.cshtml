@using cloud_Api_MCR.Models.Account_DTO
@using cloud_Api_MCR.Models.ASL_DTO
@model cloud_Api_MCR.Models.MCR_DTO.ViewMcrBranch
@{
    ViewBag.Title = "Create";
    if (HttpContext.Current.Session["loggedToken"] == null)
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    var loggedToken = HttpContext.Current.Session["loggedToken"]?.ToString();
    var loggedUserTp = HttpContext.Current.Session["loggedUserType"].ToString();
    var loggedUserStatus = HttpContext.Current.Session["loggedUserStatus"].ToString();
    var loggedCompId = HttpContext.Current.Session["loggedCompID"].ToString();
    var loggedUserId = HttpContext.Current.Session["loggedUserID"].ToString();
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    var createStatus = "";
    var updateStatus = "";
    var deleteStatus = "";
    var viewStatus = "";
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {
        ViewAslRole roleInfo = new ViewAslRole();
        roleInfo = (ViewAslRole)TempData["UserRoleInfo"];
        if (roleInfo != null)
        {
            viewStatus = roleInfo.Status;
            createStatus = roleInfo.Insertr;
            updateStatus = roleInfo.Updater;
            deleteStatus = roleInfo.Deleter;
        }
    }

    if (createStatus == "A")
    {

    }
    else if (updateStatus == "A")
    {
        Response.Redirect("~/Branch/Update");
    }
    else if (deleteStatus == "A")
    {
        Response.Redirect("~/Branch/Delete");
    }

    if (viewStatus == "I" || createStatus == "I")
    {
        Response.Redirect("~/GraphView/Index");
    }
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div id="contentHeaderBox">

        @if (TempData["BranchCreateMessage"] != null)
        {
            <h1 style="padding-left: 16px">
                Create Branch - &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: #c71817; font-style: italic;">@TempData["BranchCreateMessage"]</span>
            </h1>
        }
        else
        {
            <h1 style="padding-left: 16px">
                Create Branch
            </h1>
        }

        <div class="btn-group pull-right" id="editOption">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                <i class="fa fa-cog"></i>
            </button>
            <ul class="dropdown-menu pull-right" style="" role="menu">
                @if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "Branch")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "Branch")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "Branch")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "Branch")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "Branch")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "Branch")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "Branch")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "Branch")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "Branch")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (createStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "Branch")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                }
                else if (updateStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "Branch")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (deleteStatus == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Delete", "Branch")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
            </ul>
        </div>



    </div>
    <br/>
    <div class="col-md-12">

        <div class="form-group">
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Branch Name", htmlAttributes: new {@class = "control-label"})
                </div>
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Branchnm, htmlAttributes: new {id = "txtBranchName", @class = "form-control", autofocus = true })
                    @Html.ValidationMessageFor(model => model.Branchnm, "", new {@class = "text-danger"})
                </div>
            </div>

            <br/>
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Address", htmlAttributes: new {@class = "control-label"})
                </div>
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Address, htmlAttributes: new {id = "txtAddress", @class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Address, "", new {@class = "text-danger"})
                </div>
            </div>
            <br/>
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Contact No", htmlAttributes: new {@class = "control-label"})
                </div>
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Contactno, htmlAttributes: new {id = "txtContactNo", @class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Contactno, "", new {@class = "text-danger"})
                </div>
            </div>
            <br/>
            <div class="row">
                <div class="col-md-3">
                    @Html.Label("Remarks", htmlAttributes: new {@class = "control-label"})
                </div>
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Remarks, htmlAttributes: new {id = "txtRemarks", @class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                </div>
                <br/>
            </div>
            <br/>

            @Html.TextBoxFor(model => model.Insltude, new {id = "latlon", style = "display: none;"})
            <input id="lat" type="hidden"/>
            <input id="lon" type="hidden"/>

            <br/>
            <div class="row">
                <div class="col-md-3"></div>
                <div class="col-md-3">
                    <input type="submit" class="btn btn-primary btn-block" value="Create" name="command"/>
                </div>
            </div>
        </div>
    </div>

    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function() {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }

            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });
    </script>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
}