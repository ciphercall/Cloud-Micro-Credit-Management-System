@using cloud_Api_MCR.Models.MCR_DTO
@model cloud_Api_MCR.Models.MCR_DTO.ViewMcrMLoan

@{
    ViewBag.Title = "Edit";
    if (HttpContext.Current.Session["loggedToken"] == null)
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }
    var loggedUserTp = HttpContext.Current.Session["loggedUserType"].ToString();
    var loggedUserStatus = HttpContext.Current.Session["loggedUserStatus"].ToString();
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }


    //Member loaded in DropdownList
    List<SelectListItem> listOfMemberName = new List<SelectListItem>();
    List<ViewMcrMember> passDataMember = new List<ViewMcrMember>();
    if (TempData["passData_SelectMemberList"] != null)
    {
        passDataMember = (List<ViewMcrMember>)TempData["passData_SelectMemberList"];
        foreach (var n in passDataMember)
        {
            listOfMemberName.Add(new SelectListItem { Text = n.Membernm, Value = n.Memberid.ToString() });
        }
    }


    // Scheme loaded in DropdownList
    List<SelectListItem> listOfScheme = new List<SelectListItem>();
    List<ViewMcrScheme> passSchemeList = new List<ViewMcrScheme>();
    if (TempData["passData_SelectSchemeList"] != null)
    {
        passSchemeList = (List<ViewMcrScheme>)TempData["passData_SelectSchemeList"];
        foreach (var n in passSchemeList)
        {
            listOfScheme.Add(new SelectListItem { Text = n.Schemeid, Value = n.Schemeid.ToString() });
        }
    }
    
}


<link href="~/Content/bootstrap-Datepicker/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap-Datepicker/datepicker3.css" rel="stylesheet" />
<link href="~/Content/select2-4.0.3/css/select2.css" rel="stylesheet" /> <!--Select2 DropDown with Box -->
<link href="~/Content/select2-4.0.3/css/select2-bootstrap.css" rel="stylesheet" /><!--Select2 DropDown with Box -->
<script src="~/Content/select2-4.0.3/js/select2.full.min.js"></script> <!--Select2 DropDown with Box -->
<script src="~/Content/bootstrap-Datepicker/bootstrap-datepicker.js"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.Compid)

    <div id="contentHeaderBox">
        <h1>Update Member Loan Information</h1>
    </div>
    <br />
    <div class="col-md-12">
        <div class="form-group">
            <div class="row">
                <div class="col-md-3">
                    <span> <b>  Date</b></span>
                    @Html.TextBoxFor(model => model.TransDate, htmlAttributes: new {id = "txtViewTransactionDate", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1"})
                    @Html.HiddenFor(model => model.Transdt, htmlAttributes: new { id = "txtTransDate", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Month</b></span>
                    @Html.TextBoxFor(model => model.Transmy, htmlAttributes: new {id = "txtTransMonthYear", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1"})
                    @Html.ValidationMessageFor(model => model.Transmy, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Memo NO</b></span>
                    @Html.TextBoxFor(model => model.Transno, htmlAttributes: new {id = "txtTransNo", text = "number", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                    @Html.ValidationMessageFor(model => model.Transno, "", new {@class = "text-danger"})
                </div>
            </div>
            <hr/>
            <div class="row">
                <div class="col-md-6">
                    <span> <b>  Scheme Name</b></span>
                    @Html.DropDownListFor(model => model.Schemeid, listOfScheme, "- Select -", htmlAttributes: new { id = "txtSchemeid", @class = "form-control input-sm select2", tabindex = "1", autofocus = true })
                    @Html.ValidationMessageFor(model => model.Schemeid, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    <span> <b>  Internal ID</b></span>
                    @Html.DropDownListFor(model => model.Internid, new SelectList(ViewBag.InternalIdList, "Value", "Text"), htmlAttributes: new { id = "txtInternId", @class = "form-control input-sm select2", tabindex = "2" })
                    @Html.ValidationMessageFor(model => model.Internid, "", new {@class = "text-danger"})
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-6">
                    <span> <b>  Member Name</b></span>
                    @Html.TextBoxFor(model => model.MemberName, htmlAttributes: new { id = "idMemberName", @class = "form-control input-sm", @tabindex = "-1", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Memberid, htmlAttributes: new { id = "txtMemberId", @class = "form-control input-sm", })
                </div>
                <div class="col-md-3">
                    <span> <b>  Loan Amount</b></span>
                    @Html.TextBoxFor(model => model.Loanamt, htmlAttributes: new { id = "txtLoanAmount", @class = "form-control input-sm", type = "number", Step = "any", tabindex = "3" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-3">
                    <span> <b>  Profit Charge(%)</b></span>
                    @Html.TextBoxFor(model => model.Pchargert, htmlAttributes: new {id = "txtPrfitChargePercent", @class = "form-control input-sm", type = "number", Step = "any", @tabindex = "4"})
                </div>
                <div class="col-md-3">
                    <span> <b>  Profit Charge</b></span>
                    @Html.TextBoxFor(model => model.Pchargeamt, htmlAttributes: new {id = "txtPrfitCharge", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1"})
                </div>
                <div class="col-md-3">
                    <span> <b>  Service Charge(%)</b></span>
                    @Html.TextBoxFor(model => model.Schargert, htmlAttributes: new {id = "txtServiceChargePercent", @class = "form-control input-sm", type = "number", Step = "any", tabindex = "5"})
                </div>
                <div class="col-md-3">
                    <span> <b>  Service Charge</b></span>
                    @Html.TextBoxFor(model => model.Schargeamt, htmlAttributes: new {id = "txtServiceCharge", @class = "form-control input-sm", @readonly = "readonly", @tabindex = "-1"})
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-3">
                    <span> <b>  Disburse Amount</b></span>
                    @Html.TextBoxFor(model => model.Disburseamt, htmlAttributes: new {id = "txtDisburseAmount", @class = "form-control input-sm", type = "number", Step = "any", @tabindex = "-1",@readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Disburseamt, "", new {@class = "text-danger"})
                </div>
                <div class="col-md-3">
                    <span> <b>  Risk Fund (%)</b></span>
                    @Html.TextBoxFor(model => model.Riskfundrt, htmlAttributes: new {id = "txtRiskFundPercent", @class = "form-control input-sm", type = "number", Step = "any", tabindex = "6"})
                </div>
                <div class="col-md-3">
                    <span> <b>  Risk Fund</b></span>
                    @Html.TextBoxFor(model => model.Riskfundamt, htmlAttributes: new {id = "txtRiskFund", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1"})
                </div>
                <div class="col-md-3">
                    <span> <b>  Collect Amount </b></span>
                    @Html.TextBoxFor(model => model.Collectamt, htmlAttributes: new {id = "txtCollectAmount", @class = "form-control input-sm", type = "number", Step = "any", @tabindex = "7"})
                    @Html.ValidationMessageFor(model => model.Collectamt, "", new {@class = "text-danger"})
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-3">
                    <span> <b>  Interest (%)</b></span>
                    @Html.TextBoxFor(model => model.Interestrt, htmlAttributes: new {id = "txtInterestPercent", @class = "form-control input-sm", type = "number", Step = "any", @tabindex = "8"})
                </div>
                <div class="col-md-3">
                    <span> <b>  Scheme Qty</b></span>
                    @Html.TextBoxFor(model => model.Schemeiqty, htmlAttributes: new {id = "txtSchemeQty", @class = "form-control input-sm", type = "number", Step = "any", @tabindex = "9"})
                </div>
                <div class="col-md-3">
                    <span> <b>  Effect From</b></span>
                    @Html.TextBoxFor(model => model.Schemeefdt, htmlAttributes: new {id = "txtEffectFromDate", @class = "form-control input-sm", tabindex = "10"})
                    @Html.ValidationMessageFor(model => model.Schemeefdt, "", new {@class = "text-danger"})
                </div>
                <div class="col-md-3">
                    <span> <b>  Effect To</b></span>
                    @Html.TextBoxFor(model => model.Schemeetdt, htmlAttributes: new {id = "txtEffectToDate", @class = "form-control input-sm", @tabindex = "11"})
                    @Html.ValidationMessageFor(model => model.Schemeetdt, "", new {@class = "text-danger"})
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-6">
                    <span> <b>  Remarks</b></span>
                    @Html.TextBoxFor(model => model.Remarks, htmlAttributes: new { id = "txtRemarks", @class = "form-control input-sm", @tabindex = "12" })
                </div>
                <div class="col-md-3">
                    <span> <b>  <br /></b></span>
                    <input type="submit" class="btn btn-primary btn-block" value="Update" name="command"/>
                </div>
                <div class="col-md-3">
                    <span> <b>  <br /></b></span>
                    <input type="button" class="btn btn-default" value="Back to List" onclick="location.href = '@Url.Action("Index", "MemberLoan")'"/>
                </div>
            </div>

            @Html.TextBoxFor(model => model.Updltude, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />

        </div>
    </div>


    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

        <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);
            //navigator.geolocation.getCurrentPosition(showPosition, positionError);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }

            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });


        $(document).ready(function () {
            
            $('#txtEffectFromDate').datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: true,
            }).on('show', function (e) {
                if (e.date) {
                    $(this).data('stickyDate', e.date);
                } else {
                    $(this).data('stickyDate', null);
                }
            }).on('hide', function (e) {
                var stickyDate = $(this).data('stickyDate');

                if (!e.date && stickyDate) {
                    $(this).datepicker('setDate', stickyDate);
                    $(this).data('stickyDate', null);
                }
            });


            $('#txtEffectToDate').datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: true,
            }).on('show', function (e) {
                if (e.date) {
                    $(this).data('stickyDate', e.date);
                } else {
                    $(this).data('stickyDate', null);
                }
            }).on('hide', function (e) {
                var stickyDate = $(this).data('stickyDate');

                if (!e.date && stickyDate) {
                    $(this).datepicker('setDate', stickyDate);
                    $(this).data('stickyDate', null);
                }
            });

            $('.select2').select2({
            });


            //$('#txtInternId').select2({
            //});


            $('#txtSchemeid').change(function () {
                $("#idMemberName").val(" ");
                $("#txtMemberId").val(" ");
                var schemeid = $('#txtSchemeid').val();
                $.ajax
                ({
                    url: '@Url.Action("InternalIdLoadAfterSchemeSelect", "MemberLoan")',
                    type: 'post',
                    dataType: "json",
                    data: { schemeId: schemeid },
                    success: function (data) {
                        $("#txtInternId").empty();
                        $("#txtInternId").append('<option value="'
                            + '">'
                            + "--Select--" + '</option>');
                        $.each(data, function (i, memo) {

                            $("#txtInternId").append('<option value="'
                                + memo.Value + '">'
                                + memo.Text + '</option>');
                        });
                    }
                });
                document.getElementById("txtInternId").focus();
            });



            $('#txtInternId').change(function () {
                var txtInternId = $('#txtInternId').val();
                var txtSchemeId = $('#txtSchemeid').val();

                var txtMemberName = document.getElementById('idMemberName');
                var txtMember = document.getElementById('txtMemberId');
                $("#idMemberName").val(" ");
                $("#txtMemberId").val(" ");
                $.getJSON(
                    "/MemberLoan/GetMemberName", { "TxtInternId": txtInternId, "TxtSchemeId": txtSchemeId },
                    function (myData) {
                        txtMemberName.value = myData.MemberName;
                        txtMember.value = myData.MemberId;
                        document.getElementById("txtLoanAmount").focus();
                    });
            });



            $("#txtLoanAmount").change(function () {
                document.getElementById('txtDisburseAmount').value = (parseFloat(document.getElementById('txtLoanAmount').value) + parseFloat(document.getElementById('txtPrfitCharge').value) + parseFloat(document.getElementById('txtServiceCharge').value)).toFixed(2);
            });

            $("#txtPrfitChargePercent").change(function () {
                document.getElementById('txtPrfitCharge').value = (document.getElementById('txtLoanAmount').value * (document.getElementById('txtPrfitChargePercent').value / 100)).toFixed(2);
                document.getElementById('txtDisburseAmount').value = (parseFloat(document.getElementById('txtLoanAmount').value) + parseFloat(document.getElementById('txtPrfitCharge').value) + parseFloat(document.getElementById('txtServiceCharge').value)).toFixed(2);
            });

            $("#txtServiceChargePercent").change(function () {
                document.getElementById('txtServiceCharge').value = (document.getElementById('txtLoanAmount').value * (document.getElementById('txtServiceChargePercent').value / 100)).toFixed(2);
                document.getElementById('txtDisburseAmount').value = (parseFloat(document.getElementById('txtLoanAmount').value) + parseFloat(document.getElementById('txtPrfitCharge').value) + parseFloat(document.getElementById('txtServiceCharge').value)).toFixed(2);
            });

            $("#txtRiskFundPercent").change(function () {
                document.getElementById('txtRiskFund').value = (document.getElementById('txtLoanAmount').value * (document.getElementById('txtRiskFundPercent').value / 100)).toFixed(2);
            });
        });
        </script>

}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}




