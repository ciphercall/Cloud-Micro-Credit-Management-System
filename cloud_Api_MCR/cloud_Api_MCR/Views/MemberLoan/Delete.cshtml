@using cloud_Api_MCR.Models.MCR_DTO
@model cloud_Api_MCR.Models.MCR_DTO.ViewMcrMLoan

@{
    ViewBag.Title = "Delete";
    if (HttpContext.Current.Session["loggedToken"] == null)
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }
    var loggedUserTp = HttpContext.Current.Session["loggedUserType"].ToString();
    var loggedUserStatus = HttpContext.Current.Session["loggedUserStatus"].ToString();
    if ((loggedUserTp == "CADMIN" || loggedUserTp == "UADMIN" || loggedUserTp == "USER") && loggedUserStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }
    

}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.Compid)

    <div id="contentHeaderBox">
        <h1>Delete Member Loan Information</h1>
    </div>
    <br />
    <div class="col-md-12">
        <div class="panel panel-primary" style="margin-bottom: 0px">
            <div class="panel-heading">Are you sure you want to delete this?</div>
        </div>
        <br />
        <div class="form-group">
            <div class="row">
                <div class="col-md-3">
                    <span> <b>  Date</b></span>
                    @Html.TextBoxFor(model => model.TransDate, htmlAttributes: new { id = "txtViewTransactionDate", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                    @Html.HiddenFor(model => model.Transdt, htmlAttributes: new { id = "txtTransDate", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Month</b></span>
                    @Html.TextBoxFor(model => model.Transmy, htmlAttributes: new { id = "txtTransMonthYear", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                    @Html.ValidationMessageFor(model => model.Transmy, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Memo NO</b></span>
                    @Html.TextBoxFor(model => model.Transno, htmlAttributes: new { id = "txtTransNo", text = "number", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                    @Html.ValidationMessageFor(model => model.Transno, "", new { @class = "text-danger" })
                </div>
            </div>
            <hr/>
            <div class="row">
                <div class="col-md-6">
                    <span> <b>  Scheme Name</b></span>
                    @Html.TextBoxFor(model => model.Schemeid, htmlAttributes: new {id = "txtSchemeid", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1"})
                    @Html.ValidationMessageFor(model => model.Schemeid, "", new {@class = "text-danger"})
                </div>
                <div class="col-md-6">
                    <span> <b>  Internal ID</b></span>
                    @Html.TextBoxFor(model => model.Internid, htmlAttributes: new {id = "txtInternId", text = "number", @class = "form-control input-sm", @maxlength = "5", @pattern = "([0-9][0-9][0-9][0-9][0-9])", @readonly = "readonly", tabindex = "-1"})
                    @Html.ValidationMessageFor(model => model.Internid, "", new {@class = "text-danger"})
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-6">
                    <span> <b>  Member Name</b></span>
                    @Html.TextBoxFor(model => model.Memberid, htmlAttributes: new { id = "txtMemberId", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                    @Html.ValidationMessageFor(model => model.Memberid, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Loan Amount</b></span>
                    @Html.TextBoxFor(model => model.Loanamt, htmlAttributes: new { id = "txtLoanAmount", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-3">
                    <span> <b>  Profit Charge(%)</b></span>
                    @Html.TextBoxFor(model => model.Pchargert, htmlAttributes: new { id = "txtPrfitChargePercent", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Profit Charge</b></span>
                    @Html.TextBoxFor(model => model.Pchargeamt, htmlAttributes: new { id = "txtPrfitCharge", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Service Charge(%)</b></span>
                    @Html.TextBoxFor(model => model.Schargert, htmlAttributes: new { id = "txtServiceChargePercent", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Service Charge</b></span>
                    @Html.TextBoxFor(model => model.Schargeamt, htmlAttributes: new { id = "txtServiceCharge", @class = "form-control input-sm", @readonly = "readonly", @tabindex = "-1" })
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-3">
                    <span> <b>  Disburse Amount</b></span>
                    @Html.TextBoxFor(model => model.Disburseamt, htmlAttributes: new { id = "txtDisburseAmount", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                    @Html.ValidationMessageFor(model => model.Disburseamt, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Risk Fund (%)</b></span>
                    @Html.TextBoxFor(model => model.Riskfundrt, htmlAttributes: new { id = "txtRiskFundPercent", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Risk Fund</b></span>
                    @Html.TextBoxFor(model => model.Riskfundamt, htmlAttributes: new { id = "txtRiskFund", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Collect Amount </b></span>
                    @Html.TextBoxFor(model => model.Collectamt, htmlAttributes: new { id = "txtCollectAmount", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                    @Html.ValidationMessageFor(model => model.Collectamt, "", new { @class = "text-danger" })
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-3">
                    <span> <b>  Interest (%)</b></span>
                    @Html.TextBoxFor(model => model.Interestrt, htmlAttributes: new { id = "txtInterestPercent", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Scheme Qty</b></span>
                    @Html.TextBoxFor(model => model.Schemeiqty, htmlAttributes: new { id = "txtSchemeQty", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Effect From</b></span>
                    @Html.TextBoxFor(model => model.Schemeefdt, htmlAttributes: new { id = "txtEffectFromDate", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                    @Html.ValidationMessageFor(model => model.Schemeefdt, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    <span> <b>  Effect To</b></span>
                    @Html.TextBoxFor(model => model.Schemeetdt, htmlAttributes: new { id = "txtEffectToDate", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                    @Html.ValidationMessageFor(model => model.Schemeetdt, "", new { @class = "text-danger" })
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-6">
                    <span> <b>  Remarks</b></span>
                    @Html.TextBoxFor(model => model.Remarks, htmlAttributes: new { id = "txtRemarks", @class = "form-control input-sm", @readonly = "readonly", tabindex = "-1" })
                </div>
                <div class="col-md-3">
                    <span> <b>  <br /></b></span>
                    <input type="submit" class="btn btn-primary btn-block" value="Delete" name="command"/>
                </div>
                <div class="col-md-3">
                    <span> <b>  <br /></b></span>
                    <input type="button" class="btn btn-default" value="Back to List" onclick="location.href = '@Url.Action("Index", "MemberLoan")'"/>
                </div>
            </div>

            @Html.TextBoxFor(model => model.Updltude, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />


        </div>
    </div>


    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);
            //navigator.geolocation.getCurrentPosition(showPosition, positionError);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }

            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });

    </script>

}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}








